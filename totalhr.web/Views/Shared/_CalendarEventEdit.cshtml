@model totalhr.Shared.Models.CalendarEventInfo
@using System.Text
@using totalhr.Resources
@using System.Collections
@using totalhr.Shared
@using totalhr.web.Helpers

@{
    ViewBag.Title = "CalendarEventEdit";

    var lstDayHours = new List<string> { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" };
    var lstDayMinutes = new List<string> {"00", "05", "10", "15", "20", "25", "30", "35", "40", "45", "50", "55" };

    var WeekDaysJS = ViewBag.WeekDaysJS;    
   
    var sbJS = new StringBuilder();
    var sbAttendees = new StringBuilder();
    var sJSChosenTargetUsers = string.Empty;
    var sJSChosenTargeDepartments = string.Empty;
    
    string startTimeHour = string.Empty;
    string startTimeMin = string.Empty;
    string endTimeHour = string.Empty;
    string endTimeMin = string.Empty;
    
    if (Model.TargetAttendeeGroupId == (int) Variables.CalendarEventTarget.User)
    {
        sJSChosenTargetUsers = string.Join<int>(",", Model.TargetAttendeeIdList);
    }
    else if (Model.TargetAttendeeGroupId == (int) Variables.CalendarEventTarget.Department)
    {
        sJSChosenTargeDepartments = string.Join<int>(",", Model.TargetAttendeeIdList);
    }  
    
    if(Model.EventId > 0)
    {
        var tempStart = Model.StartTime.Split(':');
        var tempEnd = Model.EndTime.Split(':');

        startTimeHour = tempStart[0];
        startTimeMin = tempStart[1];
        endTimeHour = tempEnd[0];
        endTimeMin = tempEnd[1];    
    }
    
     var dicoStartDate = new Dictionary<string, object>{ 
                            { "class", "datetype"},
                            {"data-beatpicker","true"},				                  
                            {"data-beatpicker-position","['*','*']"},
                            {"data-beatpicker-format","['DD','MM','YYYY'],separator:'/'"},
                            {"data-beatpicker-module","gotoDate,clear"},
                            {"data-beatpicker-id", "StartDate"}
                        };
                        
    var dicoEndDate = new Dictionary<string, object>{ 
                            { "class", "datetype"},
                            {"data-beatpicker","true"},				                  
                            {"data-beatpicker-position","['*','*']"},
                            {"data-beatpicker-format","['DD','MM','YYYY'],separator:'/'"},
                            {"data-beatpicker-module","gotoDate,clear"},
                            {"data-beatpicker-id", "EndDate"}
                        };
        
       if (Model.EventId < 1){
           dicoStartDate.Add("value", "");
            dicoEndDate.Add("value", "");
       }
   
       
 }


@using (Html.BeginForm("CreateEvent", "Calendar"))
{
     @Html.ValidationSummary()

    <div class="formwrapper">

            <div class="line">
                <div class="block">
			        <label class="fix200W">@FormMessages.Label_Title: <span class="req">*</span></label>
                    @Html.TextBoxFor(x => x.Title)                    
                </div>
            </div>

             <div class="line">
                 <div class="block">
                    <label class="fix200W">@FormMessages.Label_Location:</label>
                    @Html.TextBoxFor(x => x.Location) 
               </div>
            </div>

            <div class="longline">
                <div class="block">
                    <label class="fix200W">@FormMessages.Label_Description:</label>
                    @Html.TextAreaFor(x => x.Description, new { @rows ="6", @cols = "40" })
                </div>               
            </div>
        
            <div class="line">
                <div class="block">
                <label class="fix200W">@FormMessages.Label_Start_Date:<span class="req">*</span></label>
                @Html.TextBoxFor(x => x.StartDate, "{0:d/MM/yyyy}",dicoStartDate) 
                
                </div>

                <div class="halfblock shiftleft">

                     @Html.HiddenFor(x => x.StartTime) 

			        <label>Hour</label>
			        @Html.DropDownList("starthour", new SelectList(lstDayHours), startTimeHour) 
			
			        <label> Min</label>			
			        @Html.DropDownList("startminute", new SelectList(lstDayMinutes), startTimeMin)
		        </div>
            </div>          
    
            <div class="line"> 
                <div class="block">
                    <label class="fix200W">@FormMessages.Label_End_Date:<span class="req">*</span></label>
                    @Html.TextBoxFor(x => x.EndDate, "{0:d/MM/yyyy}", dicoEndDate)
                    
                </div>
                 <div class="halfblock shiftleft">

                    @Html.HiddenFor(x => x.EndTime) 

			        <label>Hour</label>
			        @Html.DropDownList("endhour", new SelectList(lstDayHours), endTimeHour) 
			
			        <label> Min</label>			
			        @Html.DropDownList("endminute", new SelectList(lstDayMinutes), endTimeMin)
		        </div>
            </div>           
            
        <div class="line">
            <div class="block">
                <label class="fix200W"> @FormMessages.Label_Reminders</label>
                
                 <div class="childblock">
                    
                     <div class="head" onclick="ToggleExpand('dvReminderContent')">
                         <span id="spReminderCount">
                             @if (Model.Reminders != null && Model.Reminders.Count > 0)
                             {
                                @(Model.Reminders.Count + " " + FormMessages.V_Added)
                             }else{
                                @FormMessages.V_None_Added
                             }
                         </span>

                        <span class="spedit" title="@FormMessages.Toolt_Edit_Reminder" onclick="Expand('spReminders');">
                            &nbsp;
                        </span>

                        <span class="spadd" title="@FormMessages.Toolt_Add_Reminder" onclick="DialogAddReminder('dvReminders');">
                            &nbsp;
                        </span>

                        <span id="spReminders" class="spview" style="display:none;">
                            &nbsp;
                        </span>

                     </div>

                     <div id="dvReminderContent" class="content" style="display:none;">
                           
                         <span class="row" id="spReminderRow_1">
                             <i class="info" title="@EnumExtensions.FurtherInfo(Variables.ReminderType.TimeBefore)">&nbsp;</i> 
                                &nbsp;
                             <input type="radio" id="rdReminder1" name="ReminderType" value="@((int)Variables.ReminderType.TimeBefore)" onchange="ApplyReminderSelection('rdReminder1');" /> 
                             &nbsp;
                                    
                             <input type="text" id="txtReminderFrequencyBefore" onchange="ApplyReminderSelection('rdReminder1');" class="shortnum" name="txtReminderFrequencyBefore" value="10" />
                             &nbsp;
                             @Html.Raw(CalendarHelper.GenerateFrequencyDDl("ddlFrequencyBeforeType", "ddlFrequencyBeforeType", @" onchange=""ApplyReminderSelection('rdReminder1')"" ")) 
                                 
                            
                             &nbsp;
                                    
                             <span id="spTimeBefore" class="tdtop">@EnumExtensions.Description(Variables.ReminderType.TimeBefore)</span>
                             
                                  
                         </span>

                        <span class="row" id="spReminderRow_2">
                                   
                                <i class="info" title="@EnumExtensions.FurtherInfo(Variables.ReminderType.EveryXTime)">&nbsp;</i>
                                &nbsp;

                                <input type="radio" id="rdReminder2" name="ReminderType" value="@((int)Variables.ReminderType.EveryXTime)" onchange="ApplyReminderSelection('rdReminder2');" />
                                &nbsp;
                                    
                                <span id="spEveryTime" class="td"> @EnumExtensions.Description(Variables.ReminderType.EveryXTime) </span>
                                    &nbsp;
                                        
                                <input type="text" id="txtReminderFrequency" onchange="ApplyReminderSelection('rdReminder2')"  class="shortnum" name="txtReminderFrequency" value="2" />
                                &nbsp;
                                
                                @Html.Raw(CalendarHelper.GenerateFrequencyDDl("ddlFrequencyType", "ddlFrequencyType", @" onchange=""ApplyReminderSelection('rdReminder2')"" "))
                                                              
                        </span>   
                           
                         
                         <div id="dvReminderOptions" class="optionbox" style="display:none;">
                             <div id="dvReminderProgress">

                             </div>
                             <div>
                                 <input type="button" value="Save" onclick="SaveReminder();"/>
                                 <input type="button" value="Add new" onclick="SaveAndResetReminder();"/>
                             </div>
                             <div id="dvAddedReminders">
                                 @if (Model.Reminders != null && Model.Reminders.Count > 0)
                                 {
                                     @Html.Raw(CalendarHelper.GenerateReminderList(Model.Reminders))
                                 }
                             </div>
                         </div>

                         </div>
                        
                       

                     @*  @Html.HiddenFor(x => x.ReminderXML)*@
                 </div>

              </div>
		    <div class="block">
			   
		    </div>
	    </div>


             <div class="line">
                  <div class="block">
			<label class="fix200W">@FormMessages.Label_TargetGroup</label>
                 <div class="childblock">
                    
                     <div class="head" onclick="ToggleExpand('dvAttendeesContent')">
                         @(Model.TargetAttendeeGroupId > 0 ? EnumExtensions.Description((Variables.CalendarEventTarget) Model.TargetAttendeeGroupId) : 
                            FormMessages.V_None_Added)
                         
                     </div>
                     <div id="dvAttendeesContent" class="content" style="display:none">
                        @foreach (var num in (Variables.CalendarEventTarget[])Enum.GetValues(typeof(Variables.CalendarEventTarget)))
                        {
                            var schecked = (int) num == Model.TargetAttendeeGroupId ? " checked " : "";
                            sbAttendees.Append(string.Format("{0} = {1};" + Environment.NewLine, num.ToString(), (int) num));
                            @Html.Raw(CalendarHelper.GenerateAttendee(num, "TargetAttendeeGroupId", schecked));
                        }                         
                       
                        @*Html.HiddenFor(x => x.InvitedUserIds)
                        @Html.HiddenFor(x => x.InvitedDepartmentIds)*@
                         
                        <div id="dvAttendeesOptions" class="optionbox" style="display:none;">

                        </div>
                     </div>

                </div>
                
              </div>
            </div>
            
          <div class="line">
                <div class="block">
			        <label class="fix200W">@FormMessages.Label_Repeat: <span class="req">*</span></label>
                    
                    <div  id="dvRepeat" class="childblock">
                    
                        <div id="dvRepeatHead" class="head" onclick="ToggleExpand('dvRepeatContent',$.trim($('#StartDate').val()) != '' ,'hdnMissingStartDate', 'AdjustRepeatBasedOnStartDate')">
                            @{
                                var title = Model.RepeatType > 0 ? EnumExtensions.Description((Variables.RepeatType) Model.RepeatType) : FormMessages.V_None_Added;
                                title = (title.Contains("{0}")) ? string.Format(title, Model.StartDate.DayOfWeek.ToString()) : title;
                            }
                            @Html.Raw(title)
                        </div>

                    <div id="dvRepeatContent" class="content" style="display:none">
                        @foreach (var num in (Variables.RepeatType[])Enum.GetValues(typeof(Variables.RepeatType)))
                        {
                            var schecked = (int) num == Model.RepeatType ? " checked " : "";
                            sbJS.Append(string.Format("{0} = {1};" + Environment.NewLine, num.ToString(), (int)num));
                            @Html.Raw(CalendarHelper.GenerateRepeatByType(num, "RepeatTypeGroup", schecked));
                        }
                    
                        <div id="repeatOptions" class="optionbox" style="display:none;">
                        
                            <span id="spRepeatBattery" style="display:none;float:left;position:relative;z-index:1004;">
                                <input type="text" id="txtRepeatDate" name="txtRepeatDate" class="datetype"
                                    data-beatpicker="true" 
                                    data-beatpicker-format="[&#39;DD&#39;,&#39;MM&#39;,&#39;YYYY&#39;],separator:&#39;/&#39;" 
                                    data-beatpicker-module="gotoDate,clear" 
                                    data-beatpicker-position="[&#39;*&#39;,&#39;*&#39;]"  />

                                <input type="button" value="Add" onclick="KeepDateIn('txtRepeatDate')" />
                            </span>
                        
                            <span id="spUntilDate" style="display:none;float:left;position:relative;z-index:1004;">
                                Until: <input type="text" id="txtRepeatUntil" name="txtRepeatUntil" class="datetype"
                                    data-beatpicker="true" 
                                    data-beatpicker-format="[&#39;DD&#39;,&#39;MM&#39;,&#39;YYYY&#39;],separator:&#39;/&#39;" 
                                    data-beatpicker-module="gotoDate,clear" 
                                    data-beatpicker-position="[&#39;*&#39;,&#39;*&#39;]"  />
                                <input type="button" value="Set" onclick="SetUntilDateIn('txtRepeatUntil')" />
                            </span>
                        
                            <span id="spRepeatValue" style="display:none;float:left;position:relative;z-index:1004;">
                                Enter year:  <input type="text" id="txtRepeatValue" class="datetype"  />
                                <input type="button" value="Add" onclick="KeepDateIn('txtRepeatValue')" />
                            </span>
                            
                            <span id="sprepeatinfo"></span>
                        </div>
                        
                      </div>
                    </div>

                    @Html.HiddenFor(x => x.RepeatType)
                    @Html.HiddenFor(x => x.RepeatXML)  
                    
                    <span id="spmonthlydate"></span>              
                </div>

                <div class="block">
                    <span class="preview" id="sppreview"></span>
                </div>
            </div>    

        <div class="line">
            <div class="block">
                <label class="fix200W">&nbsp;</label>

                <input type="button" value="@FormMessages.btn_Reset" onclick='@( @"document.location.href=""/Calendar/CreateEvent/" + Model.CalendarId + @""" ")' />
                <input type="submit" value="@FormMessages.btn_Value_Save" onclick="return PrepareToSaveValues()" />
             </div>
        </div>
                
            @Html.HiddenFor(x => x.EventId)
            @Html.HiddenFor(x => x.CalendarId)


      </div>
      

}
    <script type="text/javascript" src="/Scripts/Site/BeatPicker.min.js"></script>
<script type="text/javascript" src="/Scripts/jquery-1.11.0.min.js"></script> 
<script type="text/javascript" src="/Scripts/date.js"></script>
    <script type="text/javascript" src="/Scripts/Site/calendar.js" ></script>

<div class="status-box" id="status"></div>

<script type="text/javascript">

    var previousSelectedId = null;
    var repeatTypeSelectedid = null;
    var prevSelDisplayObj = null;
    var RepeatsToSave = new Array();
    var EventId = @Model.EventId;
    var ERROR_INVALID_DATE = "@FormMessages.Error_Invalid_Date";
    var InvitedUsers = @("[" + sJSChosenTargetUsers + "]");
    var InvitedDepartments = @("[" + sJSChosenTargeDepartments + "]");
    
    @sbJS.ToString()
   
    @Html.Raw(WeekDaysJS)

    @Html.Raw(sbAttendees)
    

    MSG_ADDED = "@Html.Raw(FormMessages.V_Added)";
    MSG_MISSING_REMINDER_TYPE = "@Html.Raw(FormMessages.Error_Missing_Reminder_Type)";
    MSG_MISSING_REMINDER_VALUES = "@Html.Raw(FormMessages.Error_Missing_Reminder_Frequency_AndValues)";
    MSG_ERROR_SUBMIT_FAILED = "@Html.Raw(FormMessages.Error_Could_Not_Submit_Form)";
    MSG_ERROR_STARTDATE_AFTER_ENDDATE = "@Html.Raw(FormMessages.Error_StartDate_After_EndDate)";

    $(document).ready(function() {

        var statusGenerator = function(text) {
            var statusElem = $("#status");
            var child = $("<span></span>").text(text);
            statusElem.append(child);
        };

        StartDate.on("select", function(data) {
            var selectedDate = data.string;
            var objDate = parseDate(selectedDate);
            var dayIndex = objDate.getDay();
            var objList = $('#spRepeatDesc_' + OnDayOfTheWeek + ' .repDay');
            
            objList.each(function( i ) {
                $(this).html(weekday[dayIndex]);
            });
            
        });

    });

    
</script>

<input type="hidden" id="hdnMissingStartDate" value="@totalhr.Resources.FormMessages.Error_StartDate_Before_Repeat" />