@using totalhr.Resources;
@using totalhr.web.Areas.Admin.Models
@using totalhr.web.Helpers;
@using totalhr.data.EF;
@using System.Text;
@using totalhr.Shared.Models;
@using AH = totalhr.web.Areas.Admin.Helpers;

@model DocumentSearchInfo

@{
    var breadCrumbItems = new List<BreadCrumbItem>
    {
        new BreadCrumbItem{Url = "", Text = Document.V_Documents, Title= Document.V_Documents}
    };

    ViewBag.Title = GenericHelper.WebsiteName + " | " + Document.V_Document_title;
    var lstDocuments = (Model.FoundDocuments  != null)? Model.FoundDocuments as List<CompanyDocument> : null;

    bool bViewTable = (lstDocuments != null && lstDocuments.Count > 0);
   
    var dicFolders = new Dictionary<int, StringBuilder>();
    var folderNames = new Dictionary<int, string>();
    var contributors = new Dictionary<int, string>();
    var contributorList = new List<SelectListItem>();
    var folderList = new List<SelectListItem>();
    
    dicFolders[0] = new StringBuilder();
    folderNames[0] = Document.V_No_Folder;
    int lastFolderId = -1, currentIndex = 0;
    int CurrentUserId = Convert.ToInt32(ViewBag.CurrentUserId);

    contributorList.Add(new SelectListItem { Value = "0", Text = Document.v_Select });

    foreach (CompanyDocument doc in lstDocuments)
    {   
        if(doc.Archived)
        {
            continue;   
        }
        
        if(!contributors.Keys.Contains(doc.CreatedBy))
        {
            contributors[doc.CreatedBy] = doc.User.firstname + " " + doc.User.surname;
            contributorList.Add(new SelectListItem
            {
                Text = contributors[doc.CreatedBy],
                Value = doc.CreatedBy.ToString()
            });
        }

        if (!folderNames.Keys.Contains(doc.FolderId.GetValueOrDefault()) && doc.FolderId > 0)
        {
            folderList.Add(new SelectListItem
            {
                Text = doc.FolderDisplayName,
                Value = doc.FolderId.ToString()
            });
        }
        
        if(lastFolderId == doc.FolderId && lastFolderId > 0)
        {
            currentIndex = lastFolderId;             
        }else if(doc.FolderId == 0){
            currentIndex = 0;            
        }else{
            currentIndex = doc.FolderId.GetValueOrDefault();            
            folderNames[currentIndex] = doc.FolderDisplayName;               
        }

        if (!dicFolders.Keys.Contains(currentIndex)) { dicFolders.Add(currentIndex,new StringBuilder()); }
        dicFolders[currentIndex].Append(DocumentHelper.MakeDocumentRow(doc, CurrentUserId));
        lastFolderId = doc.FolderId.GetValueOrDefault();
    }    
     
    if(dicFolders[0].Length < 10)
    {
        dicFolders.Remove(0);   
    }else{
        folderList.Add(new SelectListItem { Value = "0.1", Text = Document.V_No_Folder });
    }

    folderList.Add(new SelectListItem { Value = "0", Text = Document.v_Select });
    
    
    //DocumentSearchInfo searchInfo = new DocumentSearchInfo();
    Model.Contributors = contributorList;
    Model.Folders = folderList;

    var searchcriteria = ViewBag.SearchCriteria;
}
 @section pagetitle{
       @Document.V_Documents
    }

    @section breadcrumb{
        @Html.Raw(AH.GenericHelper.MakeBreadCrumb(breadCrumbItems))
    }



@section extrastyles{
    <link rel="stylesheet" type="text/css" href="/Content/css/companydocument.css" />
 }

@section scripts{
     <script type="text/javascript" src="/Scripts/Site/CompanyDocument.js"></script>
}

<div class="row-fluid">        
    <div class="widget">
        <div class="widget-title">
            <h4><i class="icon-reorder"></i> @Document.V_Document_Search</h4>
            <span class="tools">
                <a href="javascript:;" class="icon-chevron-up"></a>                   
            </span>
        </div>
        <div class="widget-body form-horizontal" style="display:none"> 
            @Html.Partial("_DocumentSearch")
        </div>
    </div>
</div>


<div class="row-fluid">        
    <div class="widget">
        <div class="widget-title">
            <h4><i class="icon-reorder"></i> @Document.V_Folder_Details</h4>
            <span class="tools">
                <a href="javascript:;" class="icon-chevron-down"></a>                   
            </span>
        </div>
        <div class="widget-body form-horizontal"> 
            
            @if(!string.IsNullOrEmpty(searchcriteria)){
                <div class="foldergroup">
                    @Html.Raw(searchcriteria)
                </div>
            }

            <div class="foldergroup">

                @if(bViewTable){
                    foreach(int key in dicFolders.Keys){
            
                        <div class="row-fluid folderblock" >
                            <div class="head">
                                <span id="spFolder_@key" class="expand" onclick="javascript:ToggleExpandGeneric('spFolder_@key', 
                                        'folder_@key', null, folderExpandButton, folderCollapseButton);">&nbsp;</span> 
                        
                                <span class="foldername">@Html.Raw(folderNames[key])</span>
                            </div>                           

                            <div id="folder_@key" class="folder" style="margin-left:3%;display:none">
                                @Html.Raw(dicFolders[key])
                            </div>
                       </div>
           
                    }
    
                }else{
                    <p class="error">
                        @Document.Error_No_Folder
                    </p>   
                }

            </div>
       
            <div class="form-actions">
                <button type="button" class="btn btn-warning" onclick="NavigateTo('/Document/Create');">
                    <i class="icon-plus icon-white"></i> @Document.V_Create_New
                </button>
            
                <button type="button" class="btn btn-warning" onclick="NavigateTo('/Document/CreateFolder');">
                    <i class="icon-plus icon-white"></i> @Document.V_Create_New_Folder
                </button>
            </div>

        </div>
     </div>
</div>

<script type="text/javascript">
    var expandButton = '/Content/images/expand.gif';
    var collapseButton = '/Content/images/collapse.gif';
    var folderExpandButton = '/Content/images/folder-close.png';
    var folderCollapseButton = '/Content/images/folder-open.png';
    var MSG_ARE_YOU_SURE_TO_DELETE = '@Html.Raw(HttpUtility.JavaScriptStringEncode(Document.JS_ARE_YOU_SURE_TO_DELETE_DOC))';
</script>

<script type="text/javascript" src="/Scripts/Site/DatePicker.js"></script>