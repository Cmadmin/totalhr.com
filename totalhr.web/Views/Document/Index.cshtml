@using totalhr.Resources;
@using totalhr.web.Helpers;
@using totalhr.data.EF;
@using System.Text;
@using totalhr.Shared.Models;

@model List<CompanyDocument>

@{
    ViewBag.Title = GenericHelper.WebsiteName + " | " + Document.V_Document_title;
    bool bViewTable =  Model != null && Model.Count > 0;
   
    var dicFolders = new Dictionary<int, StringBuilder>();
    var folderNames = new Dictionary<int, string>();
    var contributors = new Dictionary<int, string>();
    var contributorList = new List<SelectListItem>();
    var folderList = new List<SelectListItem>();
    
    dicFolders[0] = new StringBuilder();
    folderNames[0] = Document.V_No_Folder;
    int lastFolderId = -1, currentIndex = 0;
    int CurrentUserId = Convert.ToInt32(ViewBag.CurrentUserId);

    contributorList.Add(new SelectListItem { Value = "0", Text = Document.v_Select });

    foreach(CompanyDocument doc in Model){        
        if(!contributors.Keys.Contains(doc.CreatedBy))
        {
            contributors[doc.CreatedBy] = doc.User.firstname + " " + doc.User.surname;
            contributorList.Add(new SelectListItem
            {
                Text = contributors[doc.CreatedBy],
                Value = doc.CreatedBy.ToString()
            });
        }
        
        if(lastFolderId == doc.FolderId && lastFolderId > 0)
        {
            currentIndex = lastFolderId;             
        }else if(doc.FolderId == 0){
            currentIndex = 0;            
        }else{
            currentIndex = doc.FolderId.GetValueOrDefault();
            dicFolders[currentIndex] = new StringBuilder();
            folderNames[currentIndex] = doc.FolderDisplayName;               
        }

        if(!doc.Archived){
            dicFolders[currentIndex].Append(DocumentHelper.MakeDocumentRow(doc, CurrentUserId));
        }
        
        lastFolderId = doc.FolderId.GetValueOrDefault();
    }

    folderList.Add(new SelectListItem { Value = "0", Text = Document.v_Select });
    
    foreach (int key in folderNames.Keys)
    {
        folderList.Add(new SelectListItem
        {
            Text = folderNames[key],
            Value = key.ToString()
        });
    }
    
    DocumentSearchInfo searchInfo = new DocumentSearchInfo();
    searchInfo.Contributors = contributorList;
    searchInfo.Folders = folderList;

    //searchInfo.FileTypes = totalhr.Shared.Variables.FileType;
    
}

@section extrastyles{
    <link rel="stylesheet" type="text/css" href="/Content/css/companydocument.css" />
 }

@section scripts{
     <script type="text/javascript" src="/Scripts/Site/CompanyDocument.js"></script>
}

<div id="main">
    <div class="content">

        <h1>@Document.V_Document_title</h1>

      @Html.Partial("_DocumentSearch", searchInfo)

      <div class="foldergroup">

        @if(bViewTable){
            foreach(int key in dicFolders.Keys){
            
                <fieldset>
                    <legend>@Html.Raw(folderNames[key])</legend>
                    <div class="folder">
                        @Html.Raw(dicFolders[key])
                    </div>
                </fieldset>
           
            }
    
        }else{
            <p class="error">
                @Document.Error_No_Folder
            </p>   
        }

     </div>
        <br />
     <div class="wide">
        <input type="button" onclick="document.location.href='/Document/Create'" value="@Document.V_Create_New" />
         &nbsp;
        <input type="button" onclick="document.location.href='/Document/CreateFolder'" value="@Document.V_Create_New_Folder"/>

     </div>

        </div>
</div>

<script type="text/javascript">
    var expandButton = '/Content/images/expand.gif';
    var collapseButton = '/Content/images/collapse.gif';
    var MSG_ARE_YOU_SURE_TO_DELETE = '@Html.Raw(HttpUtility.JavaScriptStringEncode(Document.JS_ARE_YOU_SURE_TO_DELETE_DOC))';
</script>

<script type="text/javascript" src="/Scripts/Site/DatePicker.js"></script>